import{_ as n,H as e,c as l,o as p,j as a,aN as r,a as i,p as h,s as k}from"./chunks/framework.DogoNsEl.js";const T=JSON.parse('{"title":"Interceptor搭建","description":"springcloud搭建","frontmatter":{"title":"Interceptor搭建","date":"2025-03-07T01:16:28.000Z","permalink":"/articles/back/java/ThreadLocal","categories":["后端"],"tags":["springboot"],"titleTag":"单体架构","sidebar":true,"article":true,"comment":true,"description":"springcloud搭建","coverImg":"https://github.com/matrix-johnjohn/kimo-docs/blob/main/images/articles/back/spring/spring16.jpg?raw=true","docAnalysis":true,"inCatalogue":true,"autoTitle":true,"articleUpdate":true,"inHomePost":true},"headers":[],"relativePath":"articles/back/java/10.线程隔离.md","filePath":"articles/back/java/10.线程隔离.md"}'),d={name:"articles/back/java/10.线程隔离.md"},o={id:"interceptor搭建-单体架构",tabindex:"-1"};function E(c,s,g,y,u,F){const t=e("TkTitleTag");return p(),l("div",null,[a("h1",o,[s[1]||(s[1]=i("Interceptor搭建 ",-1)),h(t,{size:"large"},{default:k(()=>[...s[0]||(s[0]=[i("单体架构",-1)])]),_:1}),s[2]||(s[2]=i()),s[3]||(s[3]=a("a",{class:"header-anchor",href:"#interceptor搭建-单体架构","aria-label":'Permalink to "Interceptor搭建 <TkTitleTag size="large">单体架构</TkTitleTag>"'},"​",-1))]),s[4]||(s[4]=r(`<blockquote><p>ThreadLocal,就是处理线程中的整个过程执行某一子进程中所需要携带的数据</p></blockquote><h2 id="线程隔离" tabindex="-1">线程隔离 <a class="header-anchor" href="#线程隔离" aria-label="Permalink to &quot;线程隔离&quot;">​</a></h2><p>使用静态变量的ThreadLocal,将数据保存在当前线程中,当线程结束的时候,数据也会被销毁;</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThreadLocal&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; currentUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThreadLocal&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setCurrentUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currentUser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCurrentUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentUser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        currentUser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,4))])}const b=n(d,[["render",E]]);export{T as __pageData,b as default};
